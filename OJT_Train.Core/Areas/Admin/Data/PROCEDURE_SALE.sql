
GO;
-- BUY PRODUCT
CREATE TRIGGER buy_product ON SALE
AFTER INSERT
AS
BEGIN
	DECLARE @QUANTITY INT
	DECLARE @PRODUCTID INT
	DECLARE @INVENTORYID INT
	SET @QUANTITY = (SELECT inserted.QUANTITY FROM inserted);
	SET @PRODUCTID = (SELECT inserted.PRODUCTID FROM inserted);
	SET @INVENTORYID = 1;
	
	IF NOT EXISTS (
		SELECT * FROM INVENTORYDETAIL 
		WHERE INVENTORYID = @INVENTORYID 
		AND PRODUCTID = @PRODUCTID
	)
	BEGIN
		INSERT INTO INVENTORYDETAIL(IMPORTEDDATE, TOTALIMPORT,REMAINING, PRODUCTID, INVENTORYID) 
		VALUES(GETDATE(), @QUANTITY, @QUANTITY, @PRODUCTID, @INVENTORYID)
	END
	ELSE
	BEGIN
		UPDATE INVENTORYDETAIL
		SET TOTALIMPORT = TOTALIMPORT + @QUANTITY,
			REMAINING = TOTALIMPORT + @QUANTITY - DELIVERED
		WHERE INVENTORYID = @INVENTORYID
		AND PRODUCTID = @PRODUCTID
	END
END;
GO;
------ CREATE SALE
CREATE PROCEDURE AddSale @Quantity int, @Price int, @ProductId int
AS
BEGIN
	INSERT INTO SALE VALUES(@ProductId, @Quantity, @Price, GETDATE(), NULL, NULL, NULL, 'False');
END;
GO;
------ UPDATE SALE
CREATE PROCEDURE Update_Sale 
@OldQuantity int, @NewQuantity int, @SaleId int,
@Price int, @TotalPrice bigint, @ProductId int, @InventoryID int
AS
BEGIN
	UPDATE SALE
	SET QUANTITY = @NewQuantity,
		PRICE = @Price,
		TOTALPRICE = @TotalPrice
	WHERE SALEID = @SaleId;
	UPDATE INVENTORYDETAIL
	SET TOTALIMPORT = TOTALIMPORT - @OldQuantity + @NewQuantity,
		REMAINING = TOTALIMPORT - @OldQuantity + @NewQuantity - DELIVERED
	WHERE INVENTORYID = @InventoryID
	AND PRODUCTID = @ProductId;
END;
GO;
------ DELETE SALE
CREATE PROCEDURE delete_sale 
@SaleId int, @Quantity int, @InventoryId int, @ProductId int
AS
BEGIN
	UPDATE SALE
	SET ISDELETE = 'True'
	WHERE SALEID = @SaleId;
	UPDATE INVENTORYDETAIL
	SET TOTALIMPORT = TOTALIMPORT - @Quantity,
		REMAINING = TOTALIMPORT - @Quantity - DELIVERED
	WHERE INVENTORYID = @InventoryId
	AND PRODUCTID = @ProductId;
END;
GO;
--GET ALL SALE
CREATE PROCEDURE GetAllSale
AS
BEGIN
	SELECT S.*, P.PRODUCTNAME FROM SALE AS S JOIN PRODUCT AS P ON S.PRODUCTID = P.PRODUCTID;
END;
EXEC GetAllSale